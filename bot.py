import asyncio
import random
import json
import aiohttp
from contextlib import suppress
import html
import aiofiles
import os

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandObject, CommandStart
from aiogram.enums.dice_emoji import DiceEmoji
from aiogram.types import Message, CallbackQuery, ContentType
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

import keyboards

# –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –∏ —á–∏—Ç–∞–µ–º –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
with open('local.dev.json', 'r') as f:
    auth_data = json.load(f)

# –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É
bot_api_token = auth_data["API_TOKEN"]
# –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∫ api –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–µ–∫–æ–≤
check_api_token = auth_data["API_CHECK_TOKEN"]

# –≠–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º MemoryStorage
storage = MemoryStorage()
bot = Bot(bot_api_token, parse_mode="HTML")
dp = Dispatcher(storage=storage)

smiles = [
    ["ü•ë", "–Ø –ª—é–±–ª—é –∞–≤–æ–∫–∞–¥–æ!"],
    ["üçì", "–ú–º–º, –≤–∫—É—Å–Ω–∞!"],
    ["‚òÅÔ∏è", "–í–∏—Ç–∞—é –≤ –æ–±–ª–∞–∫–∞—Ö!"]
]


# –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM
class PhotoStates(StatesGroup):
    waiting_for_photo = State()


@dp.message(CommandStart())
async def start(message: Message):
    await message.answer(f"Hello, <b>{message.from_user.first_name}!</b>", reply_markup=keyboards.main_kb)


@dp.message(Command(commands=["rn", "random-number"]))  # /rn 1-100
async def get_random_number(message: Message, command: CommandObject):
    try:
        a, b = [int(n) for n in command.args.split("-")]  # [1, 100]
        rnum = random.randint(a, b)
        # TODO: –†–∞—Å–ø–∏—Å–∞—Ç—å Exceptions
        await message.reply(f"Random number: {rnum}")

    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞: {e}")


@dp.message(Command("play"))
async def play_games(message: Message):
    await message.answer_dice(DiceEmoji.DICE)


@dp.callback_query(keyboards.Pagination.filter(F.action.in_(["prev", "next"])))
async def pagination_handler(call: CallbackQuery, callback_data: keyboards.Pagination):
    page_num = int(callback_data.page)
    page = page_num - 1 if page_num > 1 else 0

    if callback_data.action == "next":
        page = page_num + 1 if page_num < (len(smiles) - 1) else page_num

    with suppress(TelegramBadRequest):
        await call.message.edit_text(
            f"{smiles[page][0]} <b>{smiles[page][1]}</b>",
            reply_markup=keyboards.paginator(page)
        )
    await call.answer("–°–º–æ—Ç—Ä–∏ –Ω–∞ —Ç–µ–∫—Å—Ç! ;)", True)


@dp.message(Command("–∫–∞–ª–æ—Ä–∏–∏"))
async def handle_calories(message: Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
    await state.set_state(PhotoStates.waiting_for_photo)


@dp.message(PhotoStates.waiting_for_photo)
async def handle_photo(message: Message, state: FSMContext):
    if message.content_type == ContentType.PHOTO:
        photo = message.photo[-1]
        photo_file_id = photo.file_id

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        file = await bot.get_file(photo_file_id)
        file_path = file.file_path
        file_url = f"https://api.telegram.org/file/bot{bot_api_token}/{file_path}"

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —á–µ—Ä–µ–∑ Telegram API
        async with aiohttp.ClientSession() as session:
            async with session.get(file_url) as response:
                photo_data = await response.read()

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π API —Å —Ç–æ–∫–µ–Ω–æ–º
            form_data = aiohttp.FormData()
            form_data.add_field('qrfile', photo_data, filename='photo.jpg')
            form_data.add_field('token', check_api_token)

            async with session.post("https://proverkacheka.com/api/v1/check/get", data=form_data) as api_response:
                if api_response.status == 200:
                    api_result = await api_response.text()  # –ó–¥–µ—Å—å –º—ã –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
                    escaped_result = html.escape(api_result)

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç API –≤ —Ñ–∞–π–ª
                    async with aiofiles.open('api_response.txt', 'w') as file:
                        await file.write(api_result)

                    await message.answer(
                        f"–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {photo_file_id}\n"
                        f"–û—Ç–≤–µ—Ç API —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: api_response.txt"
                    )
                else:
                    error_text = await api_response.text()
                    escaped_error = html.escape(error_text)

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É API –≤ —Ñ–∞–π–ª
                    async with aiofiles.open('api_error.txt', 'w') as file:
                        await file.write(error_text)

                    await message.answer(
                        f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –°—Ç–∞—Ç—É—Å: {api_response.status}\n"
                        f"–û—Ç–≤–µ—Ç API —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: api_error.txt"
                    )
        await state.clear()
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ.")


@dp.message()
async def echo(message: Message, state: FSMContext):
    msg = message.text.lower()

    match msg:
        case "–∫–∞–ª–æ—Ä–∏–∏":
            await handle_calories(message, state)  # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
        case "—Å—Å—ã–ª–∫–∏":
            await message.answer("–í–æ—Ç –≤–∞—à–∏ —Å—Å—ã–ª–∫–∏:", reply_markup=keyboards.links_kb)
        case "—Å–ø–µ—Ü. –∫–Ω–æ–ø–∫–∏":
            await message.answer("–°–ø–µ—Ü. –∫–Ω–æ–ø–∫–∏", reply_markup=keyboards.spec_kb)
        case "–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ:", reply_markup=keyboards.calc_kb())
        case "—Å–º–∞–π–ª–∏–∫–∏":
            await message.answer(f"{smiles[0][0]} <b>{smiles[0][1]}</b>", reply_markup=keyboards.paginator())
        case "–Ω–∞–∑–∞–¥":
            await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥.", reply_markup=keyboards.main_kb)  # –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        case _:
            pass  # –î—Ä—É–≥–∏–µ —Å–ª—É—á–∞–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ –≤–∞—à–µ–º—É —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é


async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
